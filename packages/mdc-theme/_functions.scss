//
// Copyright 2017 Google Inc. All Rights Reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//      http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//

@import "./constants";
@import "./variables";

// Map of each of the theme colors.

$mdc-theme-property-values: (
  // Primary
  primary: $mdc-theme-primary,
  // Secondary
  secondary: $mdc-theme-secondary,
  // Background
  background: $mdc-theme-background,
  // Surface
  surface: $mdc-theme-surface,
  // Error
  error: $mdc-theme-error,
  // Text "on" colors
  on-primary: $mdc-theme-on-primary,
  on-secondary: $mdc-theme-on-secondary,
  on-background: $mdc-theme-on-background,
  on-surface: $mdc-theme-on-surface,
  on-error: $mdc-theme-on-error
);

// If `$property` is a literal color value (e.g., `blue`, `#fff`), it is returned verbatim. Otherwise, the value of the
// corresponding theme property (from `$mdc-theme-property-values`) is returned. If `$property` is not a color and no
// such theme property exists, an error is thrown.
//
// This is mainly useful in situations where `mdc-theme-prop` cannot be used directly (e.g., `box-shadow`).
//
// Examples:
//
// 1. mdc-theme-prop-value(primary) => "#3f51b5"
// 2. mdc-theme-prop-value(blue)    => "blue"
@function mdc-theme-prop-value($property) {
  @if type-of($property) == "color" or $property == "currentColor" {
    @return $property;
  }

  @if not map-has-key($mdc-theme-property-values, $property) {
    @error "Invalid theme property: '#{$property}'. Choose one of: #{map-keys($mdc-theme-property-values)}";
  }

  @return map-get($mdc-theme-property-values, $property);
}

// Calculate the luminance for a color.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function mdc-theme-luminance($color) {
  $color-value: mdc-theme-prop-value($color);

  $red: nth($mdc-theme-linear-channel-values, red($color-value) + 1);
  $green: nth($mdc-theme-linear-channel-values, green($color-value) + 1);
  $blue: nth($mdc-theme-linear-channel-values, blue($color-value) + 1);

  @return .2126 * $red + .7152 * $green + .0722 * $blue;
}

// Calculate the contrast ratio between two colors.
// See https://www.w3.org/TR/WCAG20-TECHS/G17.html#G17-tests
@function mdc-theme-contrast($back, $front) {
  $backLum: mdc-theme-luminance($back) + .05;
  $foreLum: mdc-theme-luminance($front) + .05;

  @return max($backLum, $foreLum) / min($backLum, $foreLum);
}

// Determine whether the color is "light" or "dark".
@function mdc-theme-tone($color) {
  @if $color == "dark" or $color == "light" {
    @return $color;
  }

  $minimumContrast: 3.1;

  $lightContrast: mdc-theme-contrast($color, white);
  $darkContrast: mdc-theme-contrast($color, rgba(black, .87));

  @if ($lightContrast < $minimumContrast) and ($darkContrast > $lightContrast) {
    @return "light";
  } @else {
    @return "dark";
  }
}

// Determine whether to use dark or light text on top of given color to meet accessibility standards for contrast.
// Returns "dark" if the given color is light and "light" if the given color is dark.
@function mdc-theme-contrast-tone($color) {
  @return if(mdc-theme-tone($color) == "dark", "light", "dark");
}

// Determine what color to use on top of given color to meet accessibility standards for contrast.
// Returns "black" if the given color is light and "white" if the given color is dark.
@function mdc-theme-accessible-ink-color($fill-color) {
  @if mdc-theme-contrast-tone($fill-color) == "dark" {
    @return #000;
  } @else {
    @return #fff;
  }
}
