@import './variables';

@function mdc-shape-get-radius($category, $radius: null, $top-left: null, $top-right: null, $bottom-right: null, $bottom-left: null) {
  $mdc-shape-baseline_: map-get($mdc-shape-category, $category);

  @return $top-left or map-get($mdc-shape-baseline_, 'top-left')
      $top-right or map-get($mdc-shape-baseline_, 'top-right')
      $bottom-right or map-get($mdc-shape-baseline_, 'bottom-right')
      $bottom-left or map-get($mdc-shape-baseline_, 'bottom-left');
}

@function mdc-shape-flip-radius($radius) {
  @return nth($radius, 2) nth($radius, 1) nth($radius, 4) nth($radius, 3);
}

@function mdc-shape-prop-value($type, $radius) {
  @if type-of($radius) == "list" {
    $radius-value: ();
    @each $corner in $radius {
      $radius-value: append($radius-value, mdc-shape-prop-corner-value_($type, $corner));
    }
    @return $radius-value;
  } @else {
    @return mdc-shape-prop-corner-value_($type, $radius);
  }
}

@function mdc-shape-prop-corner-value_($type, $radius) {
  @if $radius == pill {
    @if not map-has-key($mdc-shape-height-values, $type) {
      @error "Invalid radius: '#{$type}' doesn't support pill type radius";
    }

    $radius: map-get($mdc-shape-height-values, $type) / 2;
  } @else if map-has-key($mdc-shape-category-values, $radius) {
    $radius: map-get($mdc-shape-category-values, $radius);
  }

  @return $radius;
}